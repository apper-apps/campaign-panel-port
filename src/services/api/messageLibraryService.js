import messageLibraryData from "@/services/mockData/messageLibrary.json";

class MessageLibraryService {
  constructor() {
    this.messages = [...messageLibraryData];
  }

  async getAll() {
    await new Promise(resolve => setTimeout(resolve, 300));
    return [...this.messages];
  }

  async getById(id) {
    await new Promise(resolve => setTimeout(resolve, 200));
    const message = this.messages.find(m => m.Id === parseInt(id));
    if (!message) {
      throw new Error(`Message with Id ${id} not found`);
    }
    return { ...message };
  }

  async create(messageData) {
    await new Promise(resolve => setTimeout(resolve, 400));
    const newId = this.messages.length > 0 ? Math.max(...this.messages.map(m => m.Id)) + 1 : 1;
    const newMessage = {
      Id: newId,
      createdAt: new Date().toISOString(),
      ...messageData
    };
    this.messages.push(newMessage);
    return { ...newMessage };
  }

  async update(id, messageData) {
    await new Promise(resolve => setTimeout(resolve, 400));
    const index = this.messages.findIndex(m => m.Id === parseInt(id));
    if (index === -1) {
      throw new Error(`Message with Id ${id} not found`);
    }
    this.messages[index] = { ...this.messages[index], ...messageData };
    return { ...this.messages[index] };
  }

  async delete(id) {
    await new Promise(resolve => setTimeout(resolve, 300));
    const index = this.messages.findIndex(m => m.Id === parseInt(id));
    if (index === -1) {
      throw new Error(`Message with Id ${id} not found`);
    }
    this.messages.splice(index, 1);
    return true;
  }

  async generateMessage(occasion, language, tone) {
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Simulate AI-generated messages based on parameters
    const messageTemplates = {
      "Festival Greeting": {
        "English": {
          "Formal": "We extend our warmest wishes to you and your family on this auspicious occasion. {voter_name}, may this festival bring prosperity and happiness to your home.",
          "Casual": "Hey {voter_name}! ЁЯОЙ Hope you're having an amazing celebration with your loved ones. Wishing you all the best!",
          "Inspirational": "Dear {voter_name}, as we celebrate this beautiful festival, let's remember that unity and joy make our community stronger. May this occasion inspire us all!"
        },
        "Marathi": {
          "Formal": "рдпрд╛ рд╢реБрдн рдЕрд╡рд╕рд░рд╛рд╡рд░ рдЖрдкрд▓реНрдпрд╛ рдЖрдгрд┐ рдЖрдкрд▓реНрдпрд╛ рдХреБрдЯреБрдВрдмрд╛рд▓рд╛ рдордирд╛рдкрд╛рд╕реВрди рд╢реБрднреЗрдЪреНрдЫрд╛. {voter_name}, рд╣рд╛ рд╕рдг рдЖрдкрд▓реНрдпрд╛ рдШрд░рд╛рдд рд╕рдореГрджреНрдзреА рдЖрдгрд┐ рдЖрдирдВрдж рдЖрдгреЛ.",
          "Casual": "рдЕрд░реЗ {voter_name}! ЁЯОЙ рддреБрдордЪрд╛ рд╕рдг рдХрд╕рд╛ рдЬрд╛рдд рдЖрд╣реЗ? рдЦреВрдк рдЖрдирдВрдж рдХрд░рд╛ рдЖрдгрд┐ рдорд┐рдард╛рдИ рдЦрд╛!",
          "Inspirational": "рдкреНрд░рд┐рдп {voter_name}, рдпрд╛ рд╕реБрдВрджрд░ рд╕рдгрд╛рдЪреНрдпрд╛ рдирд┐рдорд┐рддреНрддрд╛рдиреЗ рдЖрдкрдг рд╕рдЧрд│реЗ рдорд┐рд│реВрди рдЖрдкрд▓реНрдпрд╛ рд╕рдорд╛рдЬрд╛рд▓рд╛ рдордЬрдмреВрдд рдмрдирд╡реВрдпрд╛!"
        }
      },
      "Event Invite": {
        "English": {
          "Formal": "Dear {voter_name}, You are cordially invited to attend our upcoming community event. Your presence would be highly valued.",
          "Casual": "Hi {voter_name}! ЁЯСЛ Got an awesome event coming up - would love to see you there!",
          "Inspirational": "Join us, {voter_name}, as we come together to build a better tomorrow for our community!"
        },
        "Marathi": {
          "Formal": "рдЖрджрд░рдгреАрдп {voter_name}, рдЖрдкрд▓реНрдпрд╛рд▓рд╛ рдЖрдордЪреНрдпрд╛ рдпреЗрддреНрдпрд╛ рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рдХрд╛рд░реНрдпрдХреНрд░рдорд╛рд╕ рдЙрдкрд╕реНрдерд┐рдд рд░рд╛рд╣рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдордВрддреНрд░рд┐рдд рдХрд░рддреЛ.",
          "Casual": "рдЕрд░реЗ {voter_name}! рдПрдХ рдЫрд╛рди рдХрд╛рд░реНрдпрдХреНрд░рдо рдпреЗрдд рдЖрд╣реЗ - рддреБрдореНрд╣реА рдирдХреНрдХреА рдпрд╛!",
          "Inspirational": "{voter_name}, рдЖрдкрд▓реНрдпрд╛ рд╕рдорд╛рдЬрд╛рдЪреЗ рдЪрд╛рдВрдЧрд▓реЗ рднрд╡рд┐рд╖реНрдп рдШрдбрд╡рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдордЪреНрдпрд╛рд╕реЛрдмрдд рд╕рд╛рдореАрд▓ рд╡реНрд╣рд╛!"
        }
      },
      "General Update": {
        "English": {
          "Formal": "Dear {voter_name}, We would like to update you on the recent developments in our community initiatives.",
          "Casual": "Hey {voter_name}! Quick update on what's happening in our neighborhood ЁЯУв",
          "Inspirational": "{voter_name}, together we're making real progress! Here's what we've accomplished recently."
        },
        "Marathi": {
          "Formal": "рдЖрджрд░рдгреАрдп {voter_name}, рдЖрдордЪреНрдпрд╛ рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рдЙрдкрдХреНрд░рдорд╛рдВрдордзреАрд▓ рдЕрд▓реАрдХрдбреАрд▓ рдШрдбрд╛рдореЛрдбреАрдВрдЪреА рдорд╛рд╣рд┐рддреА рджреЗрдд рдЖрд╣реЛрдд.",
          "Casual": "рдЕрд░реЗ {voter_name}! рдЖрдордЪреНрдпрд╛ рдкрд░рд┐рд╕рд░рд╛рдд рдХрд╛рдп рдЪрд╛рд▓реВ рдЖрд╣реЗ рддреЗ рд╕рд╛рдВрдЧрддреЛ ЁЯУв",
          "Inspirational": "{voter_name}, рдЖрдкрдг рд╕рдЧрд│реЗ рдорд┐рд│реВрди рдЦрд░реЛрдЦрд░ рдкреНрд░рдЧрддреА рдХрд░рдд рдЖрд╣реЛрдд! рдкрд╛рд╣рд╛ рдЖрдкрдг рдХрд╛рдп рд╕рд╛рдзреНрдп рдХреЗрд▓реЗ рдЖрд╣реЗ."
        }
      }
    };

    const template = messageTemplates[occasion]?.[language]?.[tone] || 
      "Dear {voter_name}, thank you for your continued support and engagement with our community initiatives.";

    return template;
  }
}

export default new MessageLibraryService();